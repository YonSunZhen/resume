      <h1>工作经历2</h1>
      <ul class="works">
        <li class="work">
          <div class="target-border">
            <div class="target-dot"></div>
          </div>
          <a href="https://www.desaysv.com/" target="blank" class="company">德赛西威</a>
          <span class="job ">前端(兼后端)工程师</span>
          <span class="time ">2017.03 - 至今 (两年)</span>
          <div class="tech-list big-screen">@Angular , typescript , Node , 性能优化 , nginx , docker , 微信小程序</div>
          <ul class="description big-screen">
            <li>前端(车联网数据云平台)
              <div>
              1) 基于 <span>@angular</span> + <span>typescript(面向对象)</span> 技术栈对车联网数据云平台进行前端开发
              </div>
              <div>
              2) 设计并实现了<span>数据接口统一封装</span>,使接口模块多系统复用,降低了接口维护成本,规范了整个开发流程,提高了开发效率
              </div>
              <div>
              3) 性能优化,配置 nginx 性能优化策略如下:
                <ul class="ul-list">
                  <li>
                    对 css、js 以及图片等资源, 配置 cache-control 缓存时间为<span>长缓存</span> 
                  </li>
                  <li>
                    对 css、js 以及 json 等文本资源进行 <span>gzip</span> 压缩
                  </li>
                  <li>
                    对于图片资源,通过 http_accept 判断浏览器是否支持 webp ,若支持,则返回 <span>webp</span> 格式的图片
                  </li>
                  <li>
                    通过 docker + nginx 进行部署, 并将镜像备份于 nexus docker 私服中,从而提高了部署效率、方便版本恢复以及部署迁移
                  </li>
                  <div>
                    优化效果: 项目的首屏时间从<span>4秒</span>降低至<span>1秒</span>以下 
                  </div>
                </ul>
              </div> 
              <div>
              4) 编写公共组件库
              </div> 
            </li>
            <div class="div-black"></div>
            <li>后端(负责node微服务的开发)
              <div>
                1）负责搭建 <span>node koa2</span> + <span>typescript</span> 工程，集成了  <span>jest</span>、<span>apidoc</span>、<span>docker</span>、<span>eslint</span>、<span>husky</span> 等功能。
                   并产出了脚手架：<span>koa-ts-cli</span>，该脚手架用来<span>初始化</span> koa2 + ts 工程，节省了每次创建新项目的大量配置时间。
              </div>
              <div>
                2) 负责对 node 后端的技术选型 (<span>koa2</span>,<span>阅读过源码</span>), 数据库设计 (mariadb), 
                   项目架构设计 (<span>route</span>层 + <span>controller</span>层 + <span>bll</span>层 + <span>dal</span>层 + <span>model</span>层)
              </div>
              <div>
                3) 负责<span>设计规范的 resful api 接口</span>、<span>设计 koa2 中间件</span>（比如跨域中间件、日志采集上报中间件 log4js + logstash、
                   全局错误处理 try catch 中间件等）、设计单元测试用例（supertest）
              </div> 
              <div>
                4) <span>定制统一的接口响应规范</span>、统一接口出错处理以及全局错误码等
              </div> 
            </li>
          </ul>

          <ul class="description small-screen">
            <li>前端(车联网数据云平台)
              <div>
                1) 基于 <span>@angular</span> + <span>typescript</span> 技术栈对车联网数据云平台进行前端开发
              </div>
              <div>
                2) 设计并实现了<span>数据接口统一封装</span>,使接口模块多系统复用,降低了接口维护成本,规范了整个开发流程,提高了开发效率
              </div>
              <div>
                3) 通过 nginx 对项目进行相关的性能优化：<span>gzip</span> , <span>缓存</span> , <span>webp</span> 等,使项目的首屏时间从<span>4秒</span>降低至<span>1秒</span>以下
              </div> 
              <div>
                4) 编写公共组件库
              </div> 
            </li>
            <div class="div-black"></div>
            <li>后端(负责node微服务的开发)
              <div>
                1）负责搭建 <span>node koa2</span> + <span>typescript</span> 工程，集成了  <span>jest</span>、<span>apidoc</span>、<span>docker</span>、<span>eslint</span>、<span>husky</span> 等功能。
                   并产出了脚手架：<span>koa-ts-cli</span>，该脚手架用来<span>初始化</span> koa2 + ts 工程，节省了每次创建新项目的大量配置时间。
              </div>
              <div>
                2) 负责对 node 后端的技术选型 (<span>koa2</span>,<span>阅读过源码</span>), 数据库设计 (mariadb), 
                   项目架构设计 (<span>route</span>层 + <span>controller</span>层 + <span>bll</span>层 + <span>dal</span>层 + <span>model</span>层)
              </div>
              <div>
                3) 负责<span>设计规范的 resful api 接口</span>、<span>设计 koa2 中间件</span>（比如跨域中间件、日志采集上报中间件 log4js + logstash、
                   全局错误处理 try catch 中间件等）、设计单元测试用例（supertest）
              </div> 
              <div>
                4) <span>定制统一的接口响应规范</span>、统一接口出错处理以及全局错误码等
              </div> 
            </li>
          </ul>
          
        </li>
      </ul>