      <h1>What I can do?</h1>
      <ul class="icando-container">
        <li class="icando-box">
          <div class="target-border">
            <div class="target-dot"></div>
          </div>
          <a href="https://github.com/SimpleCodeCX/cv" target="blank" class="title">
            本简历采用如下技术实现
            <span class="big-screen">(点击对应github代码)</span>
            <span class="small-screen">(点击看代码)</span>:
          </a>
          <div class="tech-list big-screen">
            <a  href="https://github.com/SimpleCodeCX/cv/tree/master/build" target="blank">webpack</a>、
            <a  href="https://github.com/SimpleCodeCX/cv/blob/master/nginx/default.conf" target="blank" >性能优化</a>、
            <a  href="https://github.com/SimpleCodeCX/cv-server" target="blank" >nodejs koa2</a>、
            <a  href="https://github.com/SimpleCodeCX/cv/tree/master/src/app" target="blank" >typescript</a>、
            <a  href="https://github.com/SimpleCodeCX/cv/tree/master/src/assets/styles" target="blank" >scss</a>、
            <a  href="https://github.com/SimpleCodeCX/cv/blob/master/Dockerfile" target="blank" >docker & DockerFile</a>、
            <a  href="https://github.com/SimpleCodeCX/cv/blob/master/nginx/default.conf" target="blank" >nginx</a>
          </div>
          <ul class="description big-screen">
            <li>
              <a href="https://github.com/SimpleCodeCX/cv/tree/master/build" target="blank">webpack</a>: 纯手工搭建 webpack 前端工程,实现编译打包 scss 并自动处理 css 前缀、typescript、图片、字体、并实现页面实时刷新等;
              <div>实现代码模块分割,将第三方库、css、异步模块分别打包成单独的 chunk 并以 chunkhash 命名,从而有利于缓存优化</div>
            </li>
            <li><a href="https://github.com/SimpleCodeCX/cv/tree/master/src/app" target="blank" >ts</a>: 熟悉 typescript 面向对象思想</li>
            <li>使用轻量级前端模板引擎: art-template</li>
            <li>
              <a href="https://github.com/SimpleCodeCX/cv/blob/master/nginx/default.conf" target="blank">性能优化</a>: 配置 nginx 性能优化策略如下:
              <div>1) 对 css、js 以及图片等资源,以 hashChunk 命名并配置 cache-control 缓存时间为长缓存</div>
              <div>2) 对 css、js 以及 json 等文本资源进行 gzip 压缩，并开启 http1.1 实现 http 长连接并边压缩边输出</div>
              <div>3) 对于图片资源,通过 http_accept 判断浏览器是否支持 webp ,若支持,则返回 webp 格式的图片</div>
            </li>
            <li><a href="https://github.com/SimpleCodeCX/cv-server" target="blank">后端开发</a>: 有后端开发和部署能力,本简历后端采用 nodejs koa2 (阅读过koa2源码)
              <div>实现 resful api 接口设计、koa2 中间件设计,定制统一接口规范以及统一出错处理,单元测试等</div>
            </li>
            <li>
              <a href="https://github.com/SimpleCodeCX/cv/blob/master/Dockerfile" target="blank">docker部署</a>: 熟悉 linux shell 命令,有 linux 部署能力,本项目部署于 centos7,前端通过 docker + nginx 进行部署,后端通过 docker + node 进行部署。
               <div>搭建了 nexus docker 私服,并将镜像备份于私服下,好处在于提高部署效率、方便版本恢复以及部署迁移。</div>
            </li>
          </ul>

          <ul class="description small-screen">
            <li>
              <a href="https://github.com/SimpleCodeCX/cv/tree/master/build" target="blank">webpack</a>: 纯手工搭建 webpack 前端工程,实现编译打包 scss 并处理 css 前缀、typescript、图片、字体、并实现页面实时刷新等;
              <div>实现代码模块分割,将第三方库、css、异步模块分别打包成单独的 chunk 并以 chunkhash 命名,从而有利于缓存优化</div>
            </li>
            <li><a href="https://github.com/SimpleCodeCX/cv/tree/master/src/app" target="blank" >ts</a>: 熟悉 typescript 面向对象思想</li>
            <li>使用轻量级前端模板引擎: art-template</li>
            <li>
              <a href="https://github.com/SimpleCodeCX/cv/blob/master/nginx/default.conf" target="blank">性能优化</a>: 配置 nginx 性能优化策略: 对静态资源设置长缓存,对文本资源进行gzip压缩,对于图片资源,检测浏览器是否支持webp,若支持,将返回图片的webp格式
            </li>
            <li><a href="https://github.com/SimpleCodeCX/cv/blob/master/Dockerfile" target="blank">docker部署</a>: 通过 docker + nginx 部署,并将镜像备份于 nexus docker 私服,好处在于提高部署效率、方便版本恢复以及部署迁移</li>
            <li><a href="https://github.com/SimpleCodeCX/cv-server" target="blank">后端开发</a>: 有后端开发和部署能力,本简历后端采用 nodejs koa2 (阅读过koa2源码)
              <div>实现 resful api 接口设计、koa2 中间件设计,定制统一接口规范以及统一出错处理,单元测试等</div>
            </li>
            <li>
              <a href="https://github.com/SimpleCodeCX/cv/blob/master/Dockerfile" target="blank">docker部署</a>: 熟悉 linux shell 命令,有 linux 部署能力,本项目部署于 centos7,前端通过 docker + nginx 进行部署,后端通过 docker + node 进行部署。
              搭建了 nexus docker 私服,并将镜像备份于私服下,好处在于提高部署效率、方便版本恢复以及部署迁移。
            </li>
          </ul>
          
        </li>
   
      </ul>
